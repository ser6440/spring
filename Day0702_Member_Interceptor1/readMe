Interceptor
필터와 비슷한 역할을 한다.

요청을 처리하기 전에 인터셉터가 요청을 가로채서 먼저 확인하고 처리한다.

Spring MVC 구성하기
1. Maven 프로젝트로 변경
2. dependency 설정
   Spring : core, context, jdbc, web, webmvc, aop
   oracle : Mybatis, Mybatis-spring
   aspectj : aspectjrt, aspectjweaver
   javax : jstl
   
3. package 구성
   dao, service, controller, model(Member), dao.mapper
   
4. MemberController  ' /member/memberList ' 요청처리하는 메서드 작성
   memberList.jsp 작성  
   MemberService(interface), MemberServiceImp (implements MemberService)
   MemberDao (interface) 

인터셉터 등록하기
1. 인터셉터 클래스 작성 (HandlerInterceptorAdaptor를 상속 받아 구현)
2. 요청을 가로채서 실행할 내용 구현(preHandle, postHandle 메서드 재정의)
3. 스프링 컨테이너에 bean으로 등록하기 
4. 해당 인터셉터가 가로챌 요청에 대한 명시 

로그인 
회원가입
----------------------------------로그인 필요없음

main
회원정보 수정화면
회원목록 화면
-----------------------------------로그인 필요

로그인이 필요한 요청은 인터셉터가 확인하고, 로그인이 되어있으면, 계속처리
로그인이 되어있지 않으면 로그인 화면으로 보내기

처리해야 될 요청정리(/member/
/loginForm 로그인 페이지 요청
/login 로그인 요청
/joinForm
/join
-----------------------------------------로그인 안해도 됨
/main
/updateForm
/update
/memberList
/logout
-----------------------------------------LoginCheckInterceptor로 인터셉터 처리

login.jsp		로그인 성공시 세션에 회원 아이디 추가 'userid', 로그인 성공시 main.jsp화면으로, 실패하면 login.jsp으로
join.jsp
memberUpdate.jsp
main.jsp -> 회원 목록보기, 회원정보수정 버튼 만들기
controller에서 session에 접근하려면 핸들러 파라미터에 HttpSession session적으면 사용가능

*************Controller 에서 요청 파라미터 받아오기******************
파라미터의 이름과 model 멤버의 이름이 같으면 (setter의 이름이 같으면)
해당 파라미터를 멤버의 값으로 매핑시켜준다.

Map으로 받아오기
컨트롤러의 메서드에 요청 파라미터를 Map으로 받아오려면, 
메서드Map<String, Object> 파라미터를 하나 추가하고 파라미터 앞에
@RequestParam 을 붙여준다. 
그러면 요청 파라미터의 이름이 key, 값이 value인 Map을 얻어올 수 있다.
 ex ) public String login(@RequestParam Map<String, Object> param) {
			.......중략........
			param.get("key");
			
	  }
			
 -----------------------------------------------------------------------------------------------------------------------------------
 RedirectAttributes
 Spring MVC controller의 메서드의 반환형이 String일 경우
 반환 값은 ' view name ' , 이 경우 화면으로 이동하는 방법은 forward
 redirect로 화면 전환이 일어날 경우 'redirect:[요청 url]' 의 형태로 반환하면 된다.
 
 ex ) /main 요청을 redirect하고 싶을 경우
 	public String login(){
 		.....중략.....
 		return "redirect:main";
 	}
Redirect시 , 속성값을 보내고 싶을 때 RedirectAttributes객체를 사용
	-1. 컨트롤러 메서드에 RedirectAttributes를 파라미터로 선언 	
 	-2. 인자로 넘어온 RedirectAttributes의 ' addFlashAttribute() ' 를 이용해 속성 추가
 	-
 	ex ) public String login(RedirectAttributes ra){
 				......중략......
 				ra.addFlashAttribute("msg", "로그인 실패");
 				......중략......
 				return "redirect:login";
 		 }
----------------------------------------------------------------------------------------------------------------------------------------
aop 적용
만들어져있는 aop적용...
transaction 적용하기
transaction : 요청 작업의 단위
 ex ) 회원가입 기능이 있다.
      회원가입 기능은 사용자가 입력한 id, 이름, 이메일등을 테이블에 저장하고,
      게시판에 자동으로 가입 인사글을 남김
      
' 지정한 여러 단위 기능이 모두 정상적으로 동작했을 때만, 요청을 처리
하나라도 정상동작 하지 않으면 취소 처리 '       

boardDao, insertBoard() 	
MemberService 
join() transaction aop 적용
 	
aop적용하기
advice 등록하기
spring 설정파일 - namespace - tx namespace 추가 	
 	
 	 







