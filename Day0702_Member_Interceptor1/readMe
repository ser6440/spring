Interceptor
필터와 비슷한 역할을 한다.

요청을 처리하기 전에 인터셉터가 요청을 가로채서 먼저 확인하고 처리한다.

Spring MVC 구성하기
1. Maven 프로젝트로 변경
2. dependency 설정
   Spring : core, context, jdbc, web, webmvc, aop
   oracle : Mybatis, Mybatis-spring
   aspectj : aspectjrt, aspectjweaver
   javax : jstl
   
3. package 구성
   dao, service, controller, model(Member), dao.mapper
   
4. MemberController  ' /member/memberList ' 요청처리하는 메서드 작성
   memberList.jsp 작성  
   MemberService(interface), MemberServiceImp (implements MemberService)
   MemberDao (interface) 

인터셉터 등록하기
1. 인터셉터 클래스 작성 (HandlerInterceptorAdaptor를 상속 받아 구현)
2. 요청을 가로채서 실행할 내용 구현(preHandle, postHandle 메서드 재정의)
3. 스프링 컨테이너에 bean으로 등록하기 
4. 해당 인터셉터가 가로챌 요청에 대한 명시 

로그인 
회원가입
----------------------------------로그인 필요없음

main
회원정보 수정화면
회원목록 화면
-----------------------------------로그인 필요

로그인이 필요한 요청은 인터셉터가 확인하고, 로그인이 되어있으면, 계속처리
로그인이 되어있지 않으면 로그인 화면으로 보내기

처리해야 될 요청정리(/member/
/loginForm 로그인 페이지 요청
/login 로그인 요청
/joinForm
/join
-----------------------------------------로그인 안해도 됨
/main
/updateForm
/update
/memberList
/logout
-----------------------------------------LoginCheckInterceptor로 인터셉터 처리

login.jsp		로그인 성공시 세션에 회원 아이디 추가 'userid', 로그인 성공시 main.jsp화면으로, 실패하면 login.jsp으로
join.jsp
memberUpdate.jsp
main.jsp -> 회원 목록보기, 회원정보수정 버튼 만들기
controller에서 session에 접근하려면 핸들러 파라미터에 HttpSession session적으면 사용가능

*************Controller 에서 요청 파라미터 받아오기******************
파라미터의 이름과 model 멤버의 이름이 같으면 (setter의 이름이 같으면)
해당 파라미터를 멤버의 값으로 매핑시켜준다.

Map으로 받아오기
 







